<?php
/**
 * DefaultApiTest
 * PHP version 7.3
 *
 * @category Class
 * @package  FreeClimb\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace FreeClimb\Api\Test\Api;

use \stdClass;
use FreeClimb\Api\Api\DefaultApi;
use \FreeClimb\Api\Configuration;
use \FreeClimb\Api\ApiException;
use \FreeClimb\Api\ObjectSerializer;
use PHPUnit\Framework\TestCase;

use GuzzleHttp\Client;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Response;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Exception\RequestException;

/**
 * DefaultApiTest Class Doc Comment
 *
 * @category Class
 * @package  FreeClimb\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApiTest extends TestCase
{

    protected $client;
    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    { 
        $mock = new MockHandler([
            new Response(201, ['X-Foo' => 'Bar'], 'Hello, World'),
            new Response(202, ['Content-Length' => 0]),
            new RequestException('Error Communicating with Server', new Request('GET', 'test'))
        ]);

        $handlerStack = HandlerStack::create($mock);

        // create our http client (Guzzle)
        $this->client = new Client(['handler' => $handlerStack]);

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for buyAPhoneNumber
     *
     * Buy a Phone Number.
     *
     */
    public function testBuyAPhoneNumber()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/IncomingPhoneNumbers';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        
        $response = $this->client->POST($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for createAConference
     *
     * Create a Conference.
     *
     */
    public function testCreateAConference()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Conferences';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        
        $response = $this->client->POST($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for createAQueue
     *
     * Create a Queue.
     *
     */
    public function testCreateAQueue()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Queues';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        
        $response = $this->client->POST($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for createAnApplication
     *
     * Create an application.
     *
     */
    public function testCreateAnApplication()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Applications';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        
        $response = $this->client->POST($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for deleteARecording
     *
     * Delete a Recording.
     *
     */
    public function testDeleteARecording()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Recordings/{recordingId}';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "recordingId" . "}";
        $path = str_replace($pathParam,'recording_id_example',$path);
        
        $response = $this->client->DELETE($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for deleteAnApplication
     *
     * Delete an application.
     *
     */
    public function testDeleteAnApplication()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Applications/{applicationId}';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "applicationId" . "}";
        $path = str_replace($pathParam,'application_id_example',$path);
        
        $response = $this->client->DELETE($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for deleteAnIncomingNumber
     *
     * Delete an Incoming Number.
     *
     */
    public function testDeleteAnIncomingNumber()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/IncomingPhoneNumbers/{phoneNumberId}';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "phoneNumberId" . "}";
        $path = str_replace($pathParam,'phone_number_id_example',$path);
        
        $response = $this->client->DELETE($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for dequeueAMember
     *
     * Dequeue a Member.
     *
     */
    public function testDequeueAMember()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Queues/{queueId}/Members/{callId}';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "queueId" . "}";
        $path = str_replace($pathParam,'queue_id_example',$path);
        $pathParam = "{" . "callId" . "}";
        $path = str_replace($pathParam,'call_id_example',$path);
        
        $response = $this->client->POST($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for dequeueHeadMember
     *
     * Dequeue Head Member.
     *
     */
    public function testDequeueHeadMember()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Queues/{queueId}/Members/Front';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "queueId" . "}";
        $path = str_replace($pathParam,'queue_id_example',$path);
        
        $response = $this->client->POST($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for downloadARecordingFile
     *
     * Download a Recording File.
     *
     */
    public function testDownloadARecordingFile()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Recordings/{recordingId}/Download';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "recordingId" . "}";
        $path = str_replace($pathParam,'recording_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for filterLogs
     *
     * Filter Logs.
     *
     */
    public function testFilterLogs()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Logs';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        
        $response = $this->client->POST($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for getACall
     *
     * Get a Call.
     *
     */
    public function testGetACall()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Calls/{callId}';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "callId" . "}";
        $path = str_replace($pathParam,'call_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for getAConference
     *
     * Get a Conference.
     *
     */
    public function testGetAConference()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Conferences/{conferenceId}';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "conferenceId" . "}";
        $path = str_replace($pathParam,'conference_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for getAMember
     *
     * Get a Member.
     *
     */
    public function testGetAMember()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Queues/{queueId}/Members/{callId}';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "queueId" . "}";
        $path = str_replace($pathParam,'queue_id_example',$path);
        $pathParam = "{" . "callId" . "}";
        $path = str_replace($pathParam,'call_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for getAParticipant
     *
     * Get a Participant.
     *
     */
    public function testGetAParticipant()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Conferences/{conferenceId}/Participants/{callId}';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "conferenceId" . "}";
        $path = str_replace($pathParam,'conference_id_example',$path);
        $pathParam = "{" . "callId" . "}";
        $path = str_replace($pathParam,'call_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for getAQueue
     *
     * Get a Queue.
     *
     */
    public function testGetAQueue()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Queues/{queueId}';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "queueId" . "}";
        $path = str_replace($pathParam,'queue_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for getARecording
     *
     * Get a Recording.
     *
     */
    public function testGetARecording()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Recordings/{recordingId}';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "recordingId" . "}";
        $path = str_replace($pathParam,'recording_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for getAnAccount
     *
     * Get an Account.
     *
     */
    public function testGetAnAccount()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for getAnApplication
     *
     * Get an Application.
     *
     */
    public function testGetAnApplication()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Applications/{applicationId}';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "applicationId" . "}";
        $path = str_replace($pathParam,'application_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for getAnIncomingNumber
     *
     * Get an Incoming Number.
     *
     */
    public function testGetAnIncomingNumber()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/IncomingPhoneNumbers/{phoneNumberId}';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "phoneNumberId" . "}";
        $path = str_replace($pathParam,'phone_number_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for getAnSmsMessage
     *
     * Get an SMS Message.
     *
     */
    public function testGetAnSmsMessage()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Messages/{messageId}';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "messageId" . "}";
        $path = str_replace($pathParam,'message_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for getHeadMember
     *
     * Get Head Member.
     *
     */
    public function testGetHeadMember()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Queues/{queueId}/Members/Front';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "queueId" . "}";
        $path = str_replace($pathParam,'queue_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for listActiveQueues
     *
     * List Active Queues.
     *
     */
    public function testListActiveQueues()
    {
        $data = new \stdClass();
        
        $data->alias = 'TEST_STRING';

        $path = '/Accounts/{accountId}/Queues';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for listAllAccountLogs
     *
     * List All Account Logs.
     *
     */
    public function testListAllAccountLogs()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Logs';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for listApplications
     *
     * List applications.
     *
     */
    public function testListApplications()
    {
        $data = new \stdClass();
        
        $data->alias = 'TEST_STRING';

        $path = '/Accounts/{accountId}/Applications';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for listAvailableNumbers
     *
     * List available numbers.
     *
     */
    public function testListAvailableNumbers()
    {
        $data = new \stdClass();
        
        $data->phone_number = 'TEST_STRING';
        $data->region = 'TEST_STRING';
        $data->country = 'TEST_STRING';
        $data->voice_enabled = true;
        $data->sms_enabled = true;
        $data->capabilities_voice = true;
        $data->capabilities_sms = true;
        $data->capabilities_toll_free = true;
        $data->capabilities_ten_dlc = true;
        $data->capabilities_short_code = true;

        $path = '/AvailablePhoneNumbers';
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for listCallLogs
     *
     * List Call Logs.
     *
     */
    public function testListCallLogs()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Calls/{callId}/Logs';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "callId" . "}";
        $path = str_replace($pathParam,'call_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for listCallRecordings
     *
     * List Call Recordings.
     *
     */
    public function testListCallRecordings()
    {
        $data = new \stdClass();
        
        $data->date_created = 'TEST_STRING';

        $path = '/Accounts/{accountId}/Calls/{callId}/Recordings';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "callId" . "}";
        $path = str_replace($pathParam,'call_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for listCalls
     *
     * List Calls.
     *
     */
    public function testListCalls()
    {
        $data = new \stdClass();
        
        $data->active = true;
        $data->to = 'TEST_STRING';
        $data->from = 'TEST_STRING';
        $data->status = 'TEST_STRING';
        $data->start_time = 'TEST_STRING';
        $data->end_time = 'TEST_STRING';
        $data->parent_call_id = 'TEST_STRING';

        $path = '/Accounts/{accountId}/Calls';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for listConferences
     *
     * List Conferences.
     *
     */
    public function testListConferences()
    {
        $data = new \stdClass();
        
        $data->status = 'TEST_STRING';
        $data->alias = 'TEST_STRING';
        $data->date_created = 'TEST_STRING';
        $data->date_updated = 'TEST_STRING';

        $path = '/Accounts/{accountId}/Conferences';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for listIncomingNumbers
     *
     * List Incoming Numbers.
     *
     */
    public function testListIncomingNumbers()
    {
        $data = new \stdClass();
        
        $data->phone_number = 'TEST_STRING';
        $data->alias = 'TEST_STRING';
        $data->region = 'TEST_STRING';
        $data->country = 'TEST_STRING';
        $data->application_id = 'TEST_STRING';
        $data->has_application = true;
        $data->voice_enabled = true;
        $data->sms_enabled = true;
        $data->capabilities_voice = true;
        $data->capabilities_sms = true;
        $data->capabilities_toll_free = true;
        $data->capabilities_ten_dlc = true;
        $data->capabilities_short_code = true;

        $path = '/Accounts/{accountId}/IncomingPhoneNumbers';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for listMembers
     *
     * List Members.
     *
     */
    public function testListMembers()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Queues/{queueId}/Members';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "queueId" . "}";
        $path = str_replace($pathParam,'queue_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for listParticipants
     *
     * List Participants.
     *
     */
    public function testListParticipants()
    {
        $data = new \stdClass();
        
        $data->talk = true;
        $data->listen = true;

        $path = '/Accounts/{accountId}/Conferences/{conferenceId}/Participants';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "conferenceId" . "}";
        $path = str_replace($pathParam,'conference_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for listRecordings
     *
     * List Recordings.
     *
     */
    public function testListRecordings()
    {
        $data = new \stdClass();
        
        $data->call_id = 'TEST_STRING';
        $data->conference_id = 'TEST_STRING';
        $data->date_created = 'TEST_STRING';

        $path = '/Accounts/{accountId}/Recordings';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for listSmsMessages
     *
     * List SMS Messages.
     *
     */
    public function testListSmsMessages()
    {
        $data = new \stdClass();
        
        $data->to = 'TEST_STRING';
        $data->from = 'TEST_STRING';
        $data->begin_time = 'TEST_STRING';
        $data->end_time = 'TEST_STRING';
        $data->direction = 'TEST_STRING';

        $path = '/Accounts/{accountId}/Messages';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for makeACall
     *
     * Make a Call.
     *
     */
    public function testMakeACall()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Calls';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        
        $response = $this->client->POST($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for removeAParticipant
     *
     * Remove a Participant.
     *
     */
    public function testRemoveAParticipant()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Conferences/{conferenceId}/Participants/{callId}';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "conferenceId" . "}";
        $path = str_replace($pathParam,'conference_id_example',$path);
        $pathParam = "{" . "callId" . "}";
        $path = str_replace($pathParam,'call_id_example',$path);
        
        $response = $this->client->DELETE($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for sendAnSmsMessage
     *
     * Send an SMS Message.
     *
     */
    public function testSendAnSmsMessage()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Messages';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        
        $response = $this->client->POST($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for streamARecordingFile
     *
     * Stream a Recording File.
     *
     */
    public function testStreamARecordingFile()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Recordings/{recordingId}/Stream';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "recordingId" . "}";
        $path = str_replace($pathParam,'recording_id_example',$path);
        
        $response = $this->client->GET($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for updateAConference
     *
     * Update a Conference.
     *
     */
    public function testUpdateAConference()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Conferences/{conferenceId}';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "conferenceId" . "}";
        $path = str_replace($pathParam,'conference_id_example',$path);
        
        $response = $this->client->POST($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for updateALiveCall
     *
     * Update a Live Call.
     *
     */
    public function testUpdateALiveCall()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Calls/{callId}';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "callId" . "}";
        $path = str_replace($pathParam,'call_id_example',$path);
        
        $response = $this->client->POST($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for updateAParticipant
     *
     * Update a Participant.
     *
     */
    public function testUpdateAParticipant()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Conferences/{conferenceId}/Participants/{callId}';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "conferenceId" . "}";
        $path = str_replace($pathParam,'conference_id_example',$path);
        $pathParam = "{" . "callId" . "}";
        $path = str_replace($pathParam,'call_id_example',$path);
        
        $response = $this->client->POST($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for updateAQueue
     *
     * Update a Queue.
     *
     */
    public function testUpdateAQueue()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Queues/{queueId}';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "queueId" . "}";
        $path = str_replace($pathParam,'queue_id_example',$path);
        
        $response = $this->client->POST($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for updateAnAccount
     *
     * Manage an account.
     *
     */
    public function testUpdateAnAccount()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        
        $response = $this->client->POST($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for updateAnApplication
     *
     * Update an application.
     *
     */
    public function testUpdateAnApplication()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/Applications/{applicationId}';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "applicationId" . "}";
        $path = str_replace($pathParam,'application_id_example',$path);
        
        $response = $this->client->POST($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }

    /**
     * Test case for updateAnIncomingNumber
     *
     * Update an Incoming Number.
     *
     */
    public function testUpdateAnIncomingNumber()
    {
        $data = new \stdClass();
        

        $path = '/Accounts/{accountId}/IncomingPhoneNumbers/{phoneNumberId}';
        $pathParam = "{" . "accountId" . "}";
        $path = str_replace($pathParam,'account_id_example',$path);
        $pathParam = "{" . "phoneNumberId" . "}";
        $path = str_replace($pathParam,'phone_number_id_example',$path);
        
        $response = $this->client->POST($path, ['json' => $data]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
    }
}
